Compiling:

gcc lisp.c mpc.c  -ledit -lm -o lisp


function defining function:
  def {fun} (\ {args body} {def (head args) (\ (tail args) body)})

list length:
  (fun {len l} { if (== l {}) {0} {+ 1 (len (tail l))}})

reverse list:
  (fun {reverse l} { if (== l {}) {{}} {join (reverse (tail l)) (head l)}})

Atoms:
  (def {nil} {})
  (def {true} 1)
  (def {false} 0)


; Open new scope
(fun {let b} {
  ((\ {_} b) ())
})

; Unpack List to Function
(fun {unpack f l} {
  eval (join (list f) l)
})

; Unapply List to Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform Several things in Sequence
(fun {do & l} {
  if (== l nil)
    {nil}
    {last l}
})

Logical Functions:
(fun {not x}   {- 1 x})
(fun {or x y}  {+ x y})
(fun {and x y} {* x y})


;;; Numeric Functions

; Minimum of Arguments
(fun {min & xs} {
  if (== (tail xs) nil) {fst xs}
    {do 
      (= {rest} (unpack min (tail xs)))
      (= {item} (fst xs))
      (if (< item rest) {item} {rest})
    }
})

; Maximum of Arguments
(fun {max & xs} {
  if (== (tail xs) nil) {fst xs}
    {do 
      (= {rest} (unpack max (tail xs)))
      (= {item} (fst xs))
      (if (> item rest) {item} {rest})
    }  
})

;;; Conditional Functions

(fun {select & cs} {
  if (== cs nil)
    {error "No Selection Found"}
    {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

(fun {case x & cs} {
  if (== cs nil)
    {error "No Case Found"}
    {if (== x (fst (fst cs))) {snd (fst cs)} {
	  unpack case (join (list x) (tail cs))}}
})

(def {otherwise} true)


;;; Misc Functions

(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

;;; List Functions

; First, Second, or Third Item in List
(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

Nth item in List:
  (fun {nth n l} { if (== n 0) {fst l} {nth (- n 1) (tail l)}})

Last item in List:
  (fun {last l} {nth (- (len l) 1) l})

Apply Function to List:

(fun {map f l} { if (== l nil) {nil} {join (list (f (fst l))) (map f (tail l))}})


Apply Filter to List:

(fun {filter f l} { if (== l nil) {nil} {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}})

; Return all of list but last element
(fun {init l} {
  if (== (tail l) nil)
    {nil}
    {join (head l) (init (tail l))}
})


Fibonacci:

(fun {fib n} { select { (== n 0) 0 } { (== n 1) 1 }{ otherwise (+ (fib (- n 1)) (fib (- n 2)))}})

